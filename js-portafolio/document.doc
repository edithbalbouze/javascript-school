Apuntes VIDEO 5
* El archivo de configuraci√≥n nos va ayudar a poder establecer la configuraci√≥n y elementos que vamos a utilizar

* Para poder crear el archivo de configuraci√≥n en la ra√≠z del proyecto creamos un archivo llamado webpack.config.js

* En el mismo debemos decir
    * El punto de entrada
    * Hacia a donde a enviar la configuraci√≥n de nuestro proyecto
    * Las extensiones que vamos usar

CODIGO
const path = require('path');

module.exports = {

  // Entry nos permite decir el punto de entrada de nuestra aplicaci√≥n
  entry: "./src/index.js",
  
  // Output nos permite decir hacia d√≥nde va enviar lo que va a preparar webpacks
  output: {
    
    // path es donde estar√° la carpeta donde se guardar√° los archivos
    // Con path.resolve podemos decir d√≥nde va estar la carpeta y la ubicaci√≥n del mismo
    path: path.resolve(__dirname, "dist"),
   
    // filename le pone el nombre al archivo final
    filename: "main.js"
  },
  resolve: {
    // Aqui ponemos las extensiones que tendremos en nuestro proyecto para webpack los lea
    extensions: [".js"]
  },
}

VIDEO 6
Apuntes
Babel nos ayudara a preparar nuestro c√≥digo javascript para que sea compatible con todos los navegadores, para esto vamos a integrar babel a nuestro proyecto tambi√©n a la configuraci√≥n de webpack.

Para instalar babel en nuestro proyecto hacemos un comando de npm

CODIGO
npm install -D babel-loader @babel/core @babel/preset-env @babel/plugin-transform-runtime 

babel-loader nos permite usar babel con webpack
@babel/core es babel en general
@babel/preset-env trae y te permite usar las ultimas caracter√≠sticas de JavaScript
@babel/plugin-transform-runtime te permite trabajar con todo el tema de asincronismo como ser async y await
Debes crear el archivo de configuraci√≥n de babel el cual tiene como nombre .babelrc
//creamos un objeto donde vamos a anadir las configuraciones que acabamos de agregar
  //En este caso los preced y los plugins que va a trabajar babel

CODIGO
{

  "presets": [
    "@babel/preset-env"
  ],

  "plugins":[

    "@babel/plugin-transform-runtime"
  ]

}
Vamos a a√±adir esta configuraci√≥n de babel a webpack para que lo podamos utilizar en el.

//modulo que tiene un objeto
 
 CODIGO
  module:{
    //que tiene unas reglas pra establecer  un arreglo donde voy a tener
      //distintas configuraciones dependiendo de lo que le agregue a esas variables
    rules :[
    {
      test: /\.m?js$/,
      exclude: /node_modules/,
      use: {

        loader: 'babel-loader'
      }

    }
  ]
  },

VIDEO 8 
Un preprocesador CSS es un programa que te permite generar CSS a partir de la syntax √∫nica del preprocesador. Existen varios preprocesadores CSS de los cuales escoger, sin embargo, la mayor√≠a de preprocesadores CSS a√±adir√°n algunas caracter√≠sticas que no existen en CSS puro, como variable, mixins, selectores anidados, entre otros. Estas caracter√≠sticas hacen la estructura de CSS m√°s legible y f√°cil de mantener.

post procesadores son herramientas que procesan el CSS y lo transforman en una nueva hoja de CSS que le permiten optimizar y automatizar los estilos para los navegadores actuales.

Apuntes
Para dar soporte a CSS en webpack debes instalar los siguientes paquetes
Con npm

CODIGO
npm i mini-css-extract-plugin css-loader -D
Con yarn

yarn add mini-css-extract-plugin css-loader -D
css-loader ‚áí Loader para reconocer CSS
mini-css-extract-plugin ‚áí Extrae el CSS en archivos
Para comenzar debemos agregar las configuraciones de webpack
const MiniCssExtractPlugin = require('mini-css-extract-plugin');

module.exports = {
	...,
	module: {
    rules: [
      {
        test: /\.(css|styl)$/i,
        use: [
          MiniCssExtractPlugin.loader,
          "css-loader",
        ]
      }
    ]
  },
  plugins: [
		...
    new MiniCssExtractPlugin(),
  ]
}
Si deseamos posteriormente podemos agregar herramientas poderosas de CSS como ser:
pre procesadores
Sass
Less
Stylus
post procesadores
Post CSS
RESUMEN: Puedes dar soporte a CSS en webpack mediante loaders y plugins, adem√°s que puedes dar superpoderes al mismo con las nuevas herramientas conocidas como pre procesadores y post procesadores

VIDEO 9

En esta clase veremos como mover un archivo o elemento dentro de src hacia la carpeta de distribution para eso veremos un plugin que se llama copiwebpack el cual nos va ayudar a mover estos archivos o recursos que necesitamos.

Primero instalamos el plugin
TERMINAL
  npm install copy-webpack-plugin -D

Importamos el plugin en nuestro archivo de configuraci√≥n de webpack
//Importamos el plugin para poder hacer uso de el 
const CopyPlugin = require('copy-webpack-plugin');
Lo instanciamos en nuestros plugins para poder hace uso de el

CODIGO
plugins: [
  
    new HtmlWebpackPlugin({

      inject: true,

      template: './public/index.html',

      filename: './index.html' 

    }),
    new MiniCssExtracPlugin(),
    //Instanciamos el plugin
      //Luego le pasamos por parametro la configuracion que va a tener
    new CopyPlugin({
      patterns:[
        {
          //De esta forma decimos que aqui es donde se encuentran los archivos 
            //Que vamos a mover
          from: path.resolve(__dirname, 'src','assets/images'),
          //hacia donde lo vamos a mover
          to: "assets/images"
        }
      ]
    })
  ]

  VIDEO 10 

  Vamos a ver una forma diferente de trabajar con im√°genes haciendo un import de las mismas y llam√°ndolas como una variable y as√≠ gener√°ndolas dentro de nuestro proyecto

Vamos a agregar la herramienta que ya nos brinda webpack para poder utilizar las imagenes
//anadimos un nuevo objeto en nuestras reglas
        //que nos servira para el manejo de imagenes
      {
        //expresion regular con imagenes .png
        test:  /\.png/,
        //tipo de archivo
        type: 'asset/resource'

      }
Luego vamos al archivo donde generamos el template y pondremos las url de las imagenes en constantes para hacer uso de ellas dentro del template en el src de nuestras imagenes
//importamos la configuracion de las imagenes

import github from '../assets/images/github.png';
import twitter from '../assets/images/twitter.png';
import instagram from '../assets/images/instagram.png';
Cuando compilemos webpack veremos como en dist ya contamos con nuestras imagenes

VIDEO 11
<h4>Apuntes</h4>
Cuando utilizamos fuentes externas una buena pr√°ctica es descargarlas a nuestro proyecto
Debido a que no hara un llamado a otros sitios
Por ello es importante usarlo dentro de webpack
Para esta tarea instalaras y usaras ‚Äúfile-loader‚Äù y ‚Äúurl-loader‚Äù
instalaci√≥n con NPM

npm install url-loader file-loader -D
instalaci√≥n con YARN

yarn add url-loader file-loader -D
Para aplicar esta configuraci√≥n debes agregar la siguiente informaci√≥n
module.exports = {
	...
  module: {
    rules: [
			...
      {
        test: /\.(woff|woff2)$/,
        use: {
          loader: "url-loader",
          options: {
            // limit => limite de tama√±o
            limit: 10000,
            // Mimetype => tipo de dato
            mimetype: "application/font-woff",
            // name => nombre de salida
            name: "[name].[ext]",
            // outputPath => donde se va a guardar en la carpeta final
            outputPath: "./assets/fonts/",
            publicPath: "./assets/fonts/",
            esModule: false,
          }
        }
      }
    ]
  },
	...
}
Es importante que dentro de los estilos agregues @font-face
@font-face {
	font-family: "Ubuntu";
	src: url("../assets/fonts/ubuntu-regular.woff2") format('woff2'),
			 url("../assets/fonts/ubuntu-regular.woff") format('woff');
	font-weight: 400;
	font-style: normal;
}

VIDEO 12
¬øPor qu√© es importante usar Hashes en nuestros archivos?<
Los recursos que se guardan en memoria cache suceden cuando el navegador entra a un sitio por primera vez detecta los recursos y los guarda. Por ello la siguiente vez sera mucho m√°s r√°pido porque estar√°n en memoria
La desventaja esta cuando sacamos una nueva versi√≥n, porque tendr√°n un mismo nombre evitando que se descargue los nuevos cambios, por lo tanto, el usuario no recibir√° los nuevos cambios
Para que no haya conflictos con la cache una vez que tengamos nuestro proyecto en producci√≥n es importante darles un hash para cada nueva versi√≥n
Segun la documentaci√≥n oficial de webpack nos comunica que actualmente terser-webpack-plugin viene incluido desde webpack 5 üòÑ

Fuente:

TerserWebpackPlugin

Probando un poco m√°s dentro del proyecto, para activar terser por defecto de webpack solo debemos usar el siguiente c√≥digo

module.exports = {
...
optimization: {
    minimize:true
  }
}

Es decir que no podemos usar la propiedad minimizer: []. Pero si dese√°ramos personalizar la optimizaci√≥n y agregar plugins como ser css-minimizer-webpack-plugin ahi toca instalar y usar terser-webpack-plugin dentro de optimizations, otro caso de este tipo ser√≠a si desearas personalizar el plugin de terser

Una de las cosas mas importantes por la cual utilizamos webpack es la optimizaci√≥n de nuestro proyecto, en comprimir nuestro css, nuestro javascript y optimizar nuestras imagenes, entre otras caracteristicas.

Vamos a instalar unas dependencias que nos ayudaran con esto

TERMINAL
npm install css-minimizer-webpack-plugin terser-webpack-plugin -D

Ahora vamos a a√±adir nuestra configuraci√≥n en nuestro archivo de webpack
//Importamos los plugins que acabamos de instalar

CODIGO
const CssMinimizerPlugin = require('css-minimizer-webpack-plugin');
const TerserPlugin = requiere('terser-webpack-plugin');
Luego vamos a a√±adir esto a nuestro archivo como una nueva configuraci√≥n llamada optimization
optimization:{
    minimize: true,
    minimizer: [
      //Instanciamos las dependencias que estamos importando
      new CssMinimizerPlugin(),
      new TerserPlugin(),
    ]
  }
Otra de las optimizaciones que podemos realizar para poder verificar las versiones que estamos trabajando tiene que ver mucho directamente con los hash

Asi que vamos a identificar cada bild de nuestro proyecto con un hash

a√±adimos los hash en output
output:{
    path: path.resolve(__dirname, 'dist'),
    //cambios este elemento y le pondremos tanto el name para que lo identifique
      //como la parte del contenthash para que nos muestre eso
  --> filename: '[name].[contenthash].js',
    //para insertar el cambio y mover las fuentes a otra carpte lo hacemos aqui
    assetModuleFilename: 'assets/image/[hash][ext][query]'
  },
lo a√±adimos en nuestras fuentes
{

        test: /\.(woff|woff2)$/,
        use: {
          loader: 'url-loader',
          options:{

            limit:10000,
            mimetype:"application/font-woff",
      -->   name: "[name].[contenthash].[ext]",
            outputPath: "./assets/fonts/",
            publicPath: "./assets/fonts/",
            esModule: false,
          }
        }

      }
Lo a√±adimos en la instancia de la dependencia que compila nuestro css
//Le anadimos una configuracion al plugin que nos permite compilar en css
 --> new MiniCssExtracPlugin({

      filename: 'assets/[name].[contenthash].css'

    }),
Terminamos la configuracion y ahora compilamos webpack y podremos ver los archivos optimizados en dist/assets

VIDEO 13
MY NOTES FOR WEBPACK ALIAS üòÑ

En esta clase vamos a aprender a como utilizar alias para los paths que estamos utilizando

Para crear un alias debes agregar la siguiente configuraci√≥n a webpack

resolve:{

    extensions:['.js'],
    //Agregamos una key alias a nuestro objeto resolve
      //para ponerles nombres mas pequenos a las extensiones
        //de nuestros archivos
    alias:{
      '@utils': path.resolve(__dirname, 'src/utils/'),
      '@templates': path.resolve(__dirname, 'src/templates/'),
      '@styles': path.resolve(__dirname, 'src/styles/'),
      '@images': path.resolve(__dirname, 'src/assets/images/'),

    }
  }
Estos alias los vamos a poder utilizar dentro de nuestro proyecto para que cuando webpack lo prepare va a identificar que esta es la ruta a la que tenemos que entrar

Luego agregamos estos alias en nuestras rutas en nuestro archivo de js
import Template from '@templates/Template.js';
import '@styles/main.css';

(async function App() {
  const main = null || document.getElementById('main');
  main.innerHTML = await Template();
})();
Lo agregamos en nuestro archivo que genera nuestro template
import getData from '@utils/getData.js';
//importamos la configuracion de las imagenes

import github from '@images/github.png';
import twitter from '@images/twitter.png';
import instagram from '@images/instagram.png';

VIDEO 16
Apuntes
Actualmente tenemos el problema de tener varios archivos repetidos los cuales se fueron acumulando por compilaciones anteriores
Para ello puedes limpiar la carpeta cada vez que hacemos un build, usando clean-webpack-plugin
Cabe recalcar que esta caracter√≠stica es mucho m√°s util para la configuraci√≥n de producci√≥n
Para instalarlo debes correr el siguiente comando:
NPM

npm install -D clean-webpack-plugin
YARN

yarn add -D clean-webpack-plugin
Para agregarlo a nuestra configuraci√≥n de webpack agregamos los siguientes cambios a webpack.config.js
...
const { CleanWebpackPlugin } = require('clean-webpack-plugin');
module.exports = {
	...
	plugins: [
		...
		new CleanWebpackPlugin()
	]
}

VIDEO 17
Webpack Watch
Apuntes
El modo watch hace que nuestro proyecto se compile de forma autom√°tica
Es decir que est√° atento a cambios
Para habilitarlo debemos agregar lo siguiente en la configuraci√≥n de webpack
module.exports = {
	...
	watch: true
}
Cada vez que haya un cambio hara un build autom√°tico
Otra manera es mandar la opci√≥n mediante par√°metros de consola en package.json
{
	"scripts": {
		"dev:watch": "webpack --config webpack.config.dev.js --watch"
	}
}
Vale la pena recordar que si aplicamos en modo producci√≥n se tomara m√°s tiempo porque se optimizaran los recursos
Por ello en modo desarrollo se salta ese paso y es m√°s r√°pido la compila


VIDEO 20 WEBPACK BUNDLE ANALYZER

Apuntes
Cuando tenemos un proyecto es buena idea poder revisar su impacto en tama√±o por ese motivo webpack nos ofrece un paquete para poder verificar y analizar el tama√±o del bundle final
Para instalar corremos el comando

TERMINAL
npm install -D webpack-bundle-analyzer

VISUAL ESTUDIO CODE => WEBPACK.CONFIG.DEV.JS
const BundleAnalyzerPlugin = require('webpack-bundle-analyzer');

new BundleAnalyzerPlugi(),

Si deseamos hacer un an√°lisis debemos correr los siguientes comandos
npx webpack --profile --json > stats.json
npx webpack-bundle-analyzer stats.json


VIDEO 21 WEBPACK DEVTOOLS
Ideas/conceptos claves
source map es un mapeo que se realiza entre el c√≥digo original y el c√≥digo transformado, tanto para archivos JavaScript como para archivos CSS. De esta forma podremos debuggear tranquilamente nuestro c√≥digo.

Apuntes
Con las devtools de webpack te permite crear un mapa de tu proyecto y con el podemos
Leer a detalle
Analizar particularidades de lo que est√° compilando nuestro proyecto
Para comenzar debemos ir a webpack.config.js y agregar la propiedad devtool: "source-map"
Esta opci√≥n genera un source map el cual posteriormente chrome lo lee y te permite depurar de una mejor forma
Responder